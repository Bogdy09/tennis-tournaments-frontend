{"ast":null,"code":"const LOCAL_STORAGE_KEY = 'tournament_offline_queue';\nfunction getLocalTournaments() {\n  const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n  return raw ? JSON.parse(raw) : [];\n}\nfunction saveLocalTournaments(tournaments) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(tournaments));\n}\nexport function getQueue() {\n  const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n  return raw ? JSON.parse(raw) : [];\n}\nexport function queueOperation(op) {\n  const queue = getQueue();\n  queue.push(op);\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(queue));\n  if (op.type === 'POST') {\n    const local = JSON.parse(localStorage.getItem('offline_local_tournaments') || '[]');\n    local.push({\n      ...op.data,\n      id: Date.now()\n    }); // generate a temp ID\n    localStorage.setItem('offline_local_tournaments', JSON.stringify(local));\n  }\n}\nconst API_URL = \"http://localhost:5000/api/tournaments\";\nexport async function syncQueue(isOnline, serverAvailable) {\n  if (!isOnline || !serverAvailable) return;\n  const queue = getQueue();\n  const remainingOps = [];\n  for (let op of queue) {\n    try {\n      if (op.type === 'POST') {\n        const res = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(op.data)\n        });\n        if (!res.ok) throw new Error(\"POST failed\");\n      } else if (op.type === 'DELETE') {\n        await fetch(`${API_URL}/${op.id}`, {\n          method: 'DELETE'\n        });\n      } else if (op.type === 'PATCH') {\n        await fetch(`${API_URL}/${op.id}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(op.data)\n        });\n      }\n    } catch (err) {\n      console.error('Sync failed for operation:', op);\n      remainingOps.push(op);\n    }\n  }\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(remainingOps));\n\n  // Remove offline-local tournaments ONLY if no remaining POST ops\n  if (!remainingOps.some(op => op.type === 'POST')) {\n    localStorage.removeItem('offline_local_tournaments');\n  }\n}","map":{"version":3,"names":["LOCAL_STORAGE_KEY","getLocalTournaments","raw","localStorage","getItem","JSON","parse","saveLocalTournaments","tournaments","setItem","stringify","getQueue","queueOperation","op","queue","push","type","local","data","id","Date","now","API_URL","syncQueue","isOnline","serverAvailable","remainingOps","res","fetch","method","headers","body","ok","Error","err","console","error","some","removeItem"],"sources":["C:/Users/lazab/tennis-tournaments11/tennis-tournaments/client/src/utils/offlineQueue.js"],"sourcesContent":["const LOCAL_STORAGE_KEY = 'tournament_offline_queue';\r\n\r\nfunction getLocalTournaments() {\r\n    const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}\r\n\r\nfunction saveLocalTournaments(tournaments) {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(tournaments));\r\n}\r\n\r\nexport function getQueue() {\r\n    const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}\r\n\r\nexport function queueOperation(op) {\r\n    const queue = getQueue();\r\n    queue.push(op);\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(queue));\r\n\r\n    if (op.type === 'POST') {\r\n        const local = JSON.parse(localStorage.getItem('offline_local_tournaments') || '[]');\r\n        local.push({ ...op.data, id: Date.now() }); // generate a temp ID\r\n        localStorage.setItem('offline_local_tournaments', JSON.stringify(local));\r\n    }\r\n}\r\n\r\n\r\nconst API_URL = \"http://localhost:5000/api/tournaments\";\r\n\r\nexport async function syncQueue(isOnline, serverAvailable) {\r\n    if (!isOnline || !serverAvailable) return;\r\n\r\n    const queue = getQueue();\r\n    const remainingOps = [];\r\n\r\n    for (let op of queue) {\r\n        try {\r\n            if (op.type === 'POST') {\r\n                const res = await fetch(API_URL, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(op.data),\r\n                });\r\n                if (!res.ok) throw new Error(\"POST failed\");\r\n            } else if (op.type === 'DELETE') {\r\n                await fetch(`${API_URL}/${op.id}`, { method: 'DELETE' });\r\n            } else if (op.type === 'PATCH') {\r\n                await fetch(`${API_URL}/${op.id}`, {\r\n                    method: 'PATCH',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(op.data),\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error('Sync failed for operation:', op);\r\n            remainingOps.push(op);\r\n        }\r\n    }\r\n\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(remainingOps));\r\n\r\n    // Remove offline-local tournaments ONLY if no remaining POST ops\r\n    if (!remainingOps.some(op => op.type === 'POST')) {\r\n        localStorage.removeItem('offline_local_tournaments');\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}