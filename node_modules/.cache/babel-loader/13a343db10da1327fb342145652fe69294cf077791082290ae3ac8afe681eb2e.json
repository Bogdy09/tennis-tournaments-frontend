{"ast":null,"code":"import _objectSpread from\"C:/Users/lazab/tennis-tournaments11/tennis-tournaments/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const LOCAL_STORAGE_KEY='tournament_offline_queue';function getLocalTournaments(){const raw=localStorage.getItem(LOCAL_STORAGE_KEY);return raw?JSON.parse(raw):[];}function saveLocalTournaments(tournaments){localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(tournaments));}export function getQueue(){const raw=localStorage.getItem(LOCAL_STORAGE_KEY);return raw?JSON.parse(raw):[];}export function queueOperation(op){const queue=getQueue();queue.push(op);localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(queue));if(op.type==='POST'){const local=JSON.parse(localStorage.getItem('offline_local_tournaments')||'[]');local.push(_objectSpread(_objectSpread({},op.data),{},{id:Date.now()}));// generate a temp ID\nlocalStorage.setItem('offline_local_tournaments',JSON.stringify(local));}}const API_URL=\"http://localhost:5000/api/tournaments\";export async function syncQueue(isOnline,serverAvailable){if(!isOnline||!serverAvailable)return;const queue=getQueue();const remainingOps=[];for(let op of queue){try{if(op.type==='POST'){const res=await fetch(API_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(op.data)});if(!res.ok)throw new Error(\"POST failed\");}else if(op.type==='DELETE'){await fetch(\"\".concat(API_URL,\"/\").concat(op.id),{method:'DELETE'});}else if(op.type==='PATCH'){await fetch(\"\".concat(API_URL,\"/\").concat(op.id),{method:'PATCH',headers:{'Content-Type':'application/json'},body:JSON.stringify(op.data)});}}catch(err){console.error('Sync failed for operation:',op);remainingOps.push(op);}}localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(remainingOps));// Remove offline-local tournaments ONLY if no remaining POST ops\nif(!remainingOps.some(op=>op.type==='POST')){localStorage.removeItem('offline_local_tournaments');}}","map":{"version":3,"names":["LOCAL_STORAGE_KEY","getLocalTournaments","raw","localStorage","getItem","JSON","parse","saveLocalTournaments","tournaments","setItem","stringify","getQueue","queueOperation","op","queue","push","type","local","_objectSpread","data","id","Date","now","API_URL","syncQueue","isOnline","serverAvailable","remainingOps","res","fetch","method","headers","body","ok","Error","concat","err","console","error","some","removeItem"],"sources":["C:/Users/lazab/tennis-tournaments11/tennis-tournaments/client/src/utils/offlineQueue.js"],"sourcesContent":["const LOCAL_STORAGE_KEY = 'tournament_offline_queue';\r\n\r\nfunction getLocalTournaments() {\r\n    const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}\r\n\r\nfunction saveLocalTournaments(tournaments) {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(tournaments));\r\n}\r\n\r\nexport function getQueue() {\r\n    const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}\r\n\r\nexport function queueOperation(op) {\r\n    const queue = getQueue();\r\n    queue.push(op);\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(queue));\r\n\r\n    if (op.type === 'POST') {\r\n        const local = JSON.parse(localStorage.getItem('offline_local_tournaments') || '[]');\r\n        local.push({ ...op.data, id: Date.now() }); // generate a temp ID\r\n        localStorage.setItem('offline_local_tournaments', JSON.stringify(local));\r\n    }\r\n}\r\n\r\n\r\nconst API_URL = \"http://localhost:5000/api/tournaments\";\r\n\r\nexport async function syncQueue(isOnline, serverAvailable) {\r\n    if (!isOnline || !serverAvailable) return;\r\n\r\n    const queue = getQueue();\r\n    const remainingOps = [];\r\n\r\n    for (let op of queue) {\r\n        try {\r\n            if (op.type === 'POST') {\r\n                const res = await fetch(API_URL, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(op.data),\r\n                });\r\n                if (!res.ok) throw new Error(\"POST failed\");\r\n            } else if (op.type === 'DELETE') {\r\n                await fetch(`${API_URL}/${op.id}`, { method: 'DELETE' });\r\n            } else if (op.type === 'PATCH') {\r\n                await fetch(`${API_URL}/${op.id}`, {\r\n                    method: 'PATCH',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(op.data),\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error('Sync failed for operation:', op);\r\n            remainingOps.push(op);\r\n        }\r\n    }\r\n\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(remainingOps));\r\n\r\n    // Remove offline-local tournaments ONLY if no remaining POST ops\r\n    if (!remainingOps.some(op => op.type === 'POST')) {\r\n        localStorage.removeItem('offline_local_tournaments');\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}