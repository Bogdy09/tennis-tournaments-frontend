{"ast":null,"code":"import axios from \"axios\";\nimport { queueOperation } from './utils/offlineQueue.js';\nconst API_URL = \"http://localhost:5000/api/tournaments\";\nexport const getTournaments = async () => {\n  const response = await fetch(\"http://localhost:5000/api/tournaments\");\n  if (!response.ok) throw new Error(\"Failed to fetch tournaments\");\n  return await response.json(); // should be { tournaments: [...] } or just [...]\n};\n\n// In api.js\nexport async function getPlayers(filters = {}) {\n  const params = new URLSearchParams(filters).toString();\n  const res = await fetch(`/api/players?${params}`);\n  if (!res.ok) throw new Error('Failed to load players');\n  return res.json();\n}\nexport async function addPlayer(player) {\n  const res = await fetch('/api/players', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(player)\n  });\n  if (!res.ok) throw new Error('Failed to add player');\n}\nexport async function updatePlayer(id, player) {\n  const res = await fetch(`/api/players/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(player)\n  });\n  if (!res.ok) throw new Error('Failed to update player');\n}\nexport async function deletePlayer(id) {\n  const res = await fetch(`/api/players/${id}`, {\n    method: 'DELETE'\n  });\n  if (!res.ok) throw new Error('Failed to delete player');\n}\nexport const getTournamentById = async (id, isOnline, serverAvailable) => {\n  if (!isOnline || !serverAvailable) {\n    const local = localStorage.getItem('offline_local_tournaments');\n    const list = local ? JSON.parse(local) : [];\n    return list.find(t => t.id === Number(id)) || null;\n  }\n  const response = await axios.get(`${API_URL}/${id}`);\n  return response.data;\n};\nexport const createTournament = async (tournament, isOnline, serverAvailable) => {\n  const userId = localStorage.getItem('userId');\n  console.log('isOnline:', isOnline, 'serverAvailable:', serverAvailable);\n  if (!isOnline || !serverAvailable) {\n    queueOperation({\n      type: 'POST',\n      data: {\n        ...tournament,\n        userId\n      }\n    });\n    const local = JSON.parse(localStorage.getItem('offline_local_tournaments') || '[]');\n    local.push({\n      ...tournament,\n      id: Date.now()\n    });\n    localStorage.setItem('offline_local_tournaments', JSON.stringify(local));\n    return {\n      queued: true\n    };\n  }\n  console.log('Sending tournament with userId:', localStorage.getItem('userId'));\n  const res = await fetch('http://localhost:5000/api/tournaments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      ...tournament,\n      userId\n    })\n  });\n  if (!res.ok) throw new Error('Network error');\n  return await res.json();\n};\nexport const deleteTournament = async (id, isOnline, serverAvailable) => {\n  const userId = localStorage.getItem('userId');\n  if (!isOnline || !serverAvailable) {\n    queueOperation({\n      type: 'DELETE',\n      id\n    });\n    return {\n      queued: true\n    };\n  }\n  try {\n    await axios.delete(`${API_URL}/${id}`, {\n      data: {\n        userId\n      }\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Failed to delete tournament:', error);\n    throw error; // Or return { success: false, error }\n  }\n};\nexport const updateTournament = async (id, updates, isOnline, serverAvailable) => {\n  console.log(\"hi\");\n  const userId = localStorage.getItem('userId');\n  if (!isOnline || !serverAvailable) {\n    queueOperation({\n      type: 'PATCH',\n      id,\n      data: updates,\n      userId\n    });\n    return {\n      queued: true\n    };\n  }\n  console.log('Updating tournament with userId:', localStorage.getItem('userId'));\n  try {\n    const response = await axios.patch(`${API_URL}/${id}`, {\n      ...updates,\n      userId\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Failed to update tournament:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","queueOperation","API_URL","getTournaments","response","fetch","ok","Error","json","getPlayers","filters","params","URLSearchParams","toString","res","addPlayer","player","method","headers","body","JSON","stringify","updatePlayer","id","deletePlayer","getTournamentById","isOnline","serverAvailable","local","localStorage","getItem","list","parse","find","t","Number","get","data","createTournament","tournament","userId","console","log","type","push","Date","now","setItem","queued","deleteTournament","delete","success","error","updateTournament","updates","patch"],"sources":["C:/Users/lazab/tennis-tournaments11/tennis-tournaments/client/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { queueOperation } from './utils/offlineQueue.js';\r\nconst API_URL = \"http://localhost:5000/api/tournaments\";\r\n\r\n\r\n\r\nexport const getTournaments = async () => {\r\n    const response = await fetch(\"http://localhost:5000/api/tournaments\");\r\n    if (!response.ok) throw new Error(\"Failed to fetch tournaments\");\r\n    return await response.json(); // should be { tournaments: [...] } or just [...]\r\n};\r\n\r\n// In api.js\r\nexport async function getPlayers(filters = {}) {\r\n    const params = new URLSearchParams(filters).toString();\r\n    const res = await fetch(`/api/players?${params}`);\r\n    if (!res.ok) throw new Error('Failed to load players');\r\n    return res.json();\r\n}\r\n\r\n\r\nexport async function addPlayer(player) {\r\n    const res = await fetch('/api/players', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(player)\r\n    });\r\n    if (!res.ok) throw new Error('Failed to add player');\r\n}\r\n\r\nexport async function updatePlayer(id, player) {\r\n    const res = await fetch(`/api/players/${id}`, { \r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(player)\r\n    });\r\n    if (!res.ok) throw new Error('Failed to update player');\r\n}\r\n\r\nexport async function deletePlayer(id) {\r\n    const res = await fetch(`/api/players/${id}`, {\r\n        method: 'DELETE'\r\n    });\r\n    if (!res.ok) throw new Error('Failed to delete player');\r\n}\r\n\r\n\r\nexport const getTournamentById = async (id, isOnline, serverAvailable) => {\r\n    if (!isOnline || !serverAvailable) {\r\n        const local = localStorage.getItem('offline_local_tournaments');\r\n        const list = local ? JSON.parse(local) : [];\r\n        return list.find(t => t.id === Number(id)) || null;\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/${id}`);\r\n    return response.data;\r\n};\r\nexport const createTournament = async (tournament, isOnline, serverAvailable) => {\r\n    const userId = localStorage.getItem('userId'); \r\n    console.log('isOnline:', isOnline, 'serverAvailable:', serverAvailable);\r\n    if (!isOnline || !serverAvailable) {\r\n        queueOperation({ type: 'POST', data: { ...tournament, userId } });\r\n\r\n        const local = JSON.parse(localStorage.getItem('offline_local_tournaments') || '[]');\r\n        local.push({ ...tournament, id: Date.now() });\r\n        localStorage.setItem('offline_local_tournaments', JSON.stringify(local));\r\n\r\n        return { queued: true };\r\n    }\r\n    console.log('Sending tournament with userId:', localStorage.getItem('userId'));\r\n\r\n\r\n    const res = await fetch('http://localhost:5000/api/tournaments', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ ...tournament, userId }), \r\n    });\r\n\r\n    if (!res.ok) throw new Error('Network error');\r\n    return await res.json();\r\n};\r\n\r\nexport const deleteTournament = async (id, isOnline, serverAvailable) => {\r\n    const userId = localStorage.getItem('userId'); \r\n    if (!isOnline || !serverAvailable) {\r\n        queueOperation({ type: 'DELETE', id });\r\n        return { queued: true };\r\n    }\r\n\r\n    try {\r\n        await axios.delete(`${API_URL}/${id}`, {\r\n            data: { userId }\r\n        });\r\n\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error('Failed to delete tournament:', error);\r\n        throw error; // Or return { success: false, error }\r\n    }\r\n};\r\nexport const updateTournament = async (id, updates, isOnline, serverAvailable) => {\r\n    console.log(\"hi\");\r\n    const userId = localStorage.getItem('userId'); \r\n    if (!isOnline || !serverAvailable) {\r\n        queueOperation({ type: 'PATCH', id, data: updates, userId });\r\n        return { queued: true };\r\n    }\r\n    console.log('Updating tournament with userId:', localStorage.getItem('userId'));\r\n    try {\r\n        const response = await axios.patch(`${API_URL}/${id}`, { ...updates, userId }, {\r\n\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Failed to update tournament:', error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}