{"ast":null,"code":"import{createContext,useState,useEffect}from\"react\";import axios from\"axios\";import{io}from\"socket.io-client\";import{jsx as _jsx}from\"react/jsx-runtime\";export const TournamentContext=/*#__PURE__*/createContext();export const TournamentProvider=_ref=>{let{children}=_ref;const[tournaments,setTournaments]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[latestTournament,setLatestTournament]=useState(null);const API_URL=\"http://localhost:5000/api/tournaments\";useEffect(()=>{const fetchTournaments=async()=>{try{setLoading(true);setError(null);const response=await axios.get(API_URL);const responseData=response.data;let tournamentsArray=[];if(Array.isArray(responseData)){tournamentsArray=responseData;}else if(Array.isArray(responseData===null||responseData===void 0?void 0:responseData.tournaments)){tournamentsArray=responseData.tournaments;}setTournaments(tournamentsArray);}catch(err){setError(err.message||'Failed to load tournaments');setTournaments([]);}finally{setLoading(false);}};fetchTournaments();//  WebSocket setup\nconst socket=io(\"http://localhost:5000\");socket.on(\"connect\",()=>{console.log(\" Connected to WebSocket server\");});socket.on(\"new-tournament\",newTournament=>{setTournaments(prev=>[...prev,newTournament]);setLatestTournament(newTournament);//  track this\n});socket.on(\"disconnect\",()=>{console.log(\" Disconnected from WebSocket server\");});return()=>{socket.disconnect();};},[]);const addTournament=async newTournament=>{try{const response=await axios.post(API_URL,newTournament);setTournaments(prev=>[...prev,response.data]);return response.data;}catch(err){throw new Error(\"API Error: \"+err.message);}};const deleteTournament=async id=>{try{await axios.delete(\"\".concat(API_URL,\"/\").concat(id));setTournaments(prev=>prev.filter(t=>t.id!==id));}catch(err){throw new Error(\"API Error: \"+err.message);}};const updateTournament=async(id,updatedFields)=>{try{const response=await axios.patch(\"\".concat(API_URL,\"/\").concat(id),updatedFields);setTournaments(prev=>prev.map(t=>t.id===id?response.data:t));return response.data;}catch(err){throw new Error(\"API Error: \"+err.message);}};return/*#__PURE__*/_jsx(TournamentContext.Provider,{value:{tournaments,loading,error,addTournament,deleteTournament,updateTournament,latestTournament},children:children});};","map":{"version":3,"names":["createContext","useState","useEffect","axios","io","jsx","_jsx","TournamentContext","TournamentProvider","_ref","children","tournaments","setTournaments","loading","setLoading","error","setError","latestTournament","setLatestTournament","API_URL","fetchTournaments","response","get","responseData","data","tournamentsArray","Array","isArray","err","message","socket","on","console","log","newTournament","prev","disconnect","addTournament","post","Error","deleteTournament","id","delete","concat","filter","t","updateTournament","updatedFields","patch","map","Provider","value"],"sources":["C:/Users/lazab/tennis-tournaments11/tennis-tournaments/client/src/context/TournamentContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nexport const TournamentContext = createContext();\r\n\r\nexport const TournamentProvider = ({ children }) => {\r\n    const [tournaments, setTournaments] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [latestTournament, setLatestTournament] = useState(null);\r\n\r\n\r\n    const API_URL = \"http://localhost:5000/api/tournaments\";\r\n\r\n    useEffect(() => {\r\n        const fetchTournaments = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setError(null);\r\n\r\n                const response = await axios.get(API_URL);\r\n                const responseData = response.data;\r\n\r\n                let tournamentsArray = [];\r\n\r\n                if (Array.isArray(responseData)) {\r\n                    tournamentsArray = responseData;\r\n                } else if (Array.isArray(responseData?.tournaments)) {\r\n                    tournamentsArray = responseData.tournaments;\r\n                }\r\n\r\n                setTournaments(tournamentsArray);\r\n\r\n            } catch (err) {\r\n                setError(err.message || 'Failed to load tournaments');\r\n                setTournaments([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchTournaments();\r\n\r\n        //  WebSocket setup\r\n        const socket = io(\"http://localhost:5000\");\r\n\r\n        socket.on(\"connect\", () => {\r\n            console.log(\" Connected to WebSocket server\");\r\n        });\r\n\r\n        socket.on(\"new-tournament\", (newTournament) => {\r\n            setTournaments(prev => [...prev, newTournament]);\r\n            setLatestTournament(newTournament); //  track this\r\n        });\r\n\r\n\r\n        socket.on(\"disconnect\", () => {\r\n            console.log(\" Disconnected from WebSocket server\");\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    const addTournament = async (newTournament) => {\r\n        try {\r\n            const response = await axios.post(API_URL, newTournament);\r\n            setTournaments(prev => [...prev, response.data]);\r\n            return response.data;\r\n        } catch (err) {\r\n            throw new Error(\"API Error: \" + err.message);\r\n        }\r\n    };\r\n\r\n    const deleteTournament = async (id) => {\r\n        try {\r\n            await axios.delete(`${API_URL}/${id}`);\r\n            setTournaments(prev => prev.filter(t => t.id !== id));\r\n        } catch (err) {\r\n            throw new Error(\"API Error: \" + err.message);\r\n        }\r\n    };\r\n\r\n    const updateTournament = async (id, updatedFields) => {\r\n        try {\r\n            const response = await axios.patch(`${API_URL}/${id}`, updatedFields);\r\n            setTournaments(prev =>\r\n                prev.map(t => (t.id === id ? response.data : t))\r\n            );\r\n            return response.data;\r\n        } catch (err) {\r\n            throw new Error(\"API Error: \" + err.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <TournamentContext.Provider value={{\r\n            tournaments,\r\n            loading,\r\n            error,\r\n            addTournament,\r\n            deleteTournament,\r\n            updateTournament,\r\n            latestTournament\r\n        }}>\r\n            {children}\r\n        </TournamentContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}